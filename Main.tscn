[gd_scene load_steps=9 format=2]

[ext_resource path="res://DebugOverlay.tscn" type="PackedScene" id=1]
[ext_resource path="res://HeadingDisplay.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

onready var longStraightScene = preload(\"res://LongStraight.tscn\")
onready var ZScene = preload(\"res://Zpiece.tscn\")
var longStraight: Piece
var mode = 0
var height = 20
var width = 4
var length = 4
var matrix = []
var toggle = true
var camera_rotate = null
onready var cameraTween = $Pivot/Tween
signal rotate_game(positive)
var original_mat

func _ready() -> void:

	for y in range(height):
		matrix.append([])
		for x in range(length):
			matrix[y].append([])
			for z in range(width):
				matrix[y][x].append(false)
				
	print_matrix()
	spawn_new_block()
	connect(\"rotate_game\", $Node2D/Viewport/HeadingDisplay, \"_rotate_heading\")
	
func _process(delta: float) -> void:

	if (camera_rotate == 0):

		cameraTween.interpolate_property($Pivot, \"rotation:y\", $Pivot.rotation.y, $Pivot.rotation.y + deg2rad(90.0), 0.15)
		cameraTween.start()
		emit_signal(\"rotate_game\", true)
		camera_rotate = null
		
	if (camera_rotate == 1):
		cameraTween.interpolate_property($Pivot, \"rotation:y\", $Pivot.rotation.y, $Pivot.rotation.y - deg2rad(90.0), 0.15)
		cameraTween.start()
		emit_signal(\"rotate_game\", false)
		camera_rotate = null

	
	
func spawn_new_block() -> void:
	mode = 0
	longStraight = longStraightScene.instance() if toggle else ZScene.instance()
	toggle = not toggle
	add_child(longStraight)	
	longStraight.transform.origin = Vector3(-length+1, height+1, -width)

func _on_Timer_timeout() -> void:
	if longStraight:
		if not is_set():
			# 2 is important for the math of converting block origin to matrix position right now
			longStraight.transform.origin.y -= 2
		else:
			remove_outline()
			record_set(longStraight)
			check_planes()
			spawn_new_block()
			
func remove_outline() -> void:
	longStraight.get_children().pop_back().queue_free()

func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"switch_mode\"):
		mode = 1 if mode == 0 else 0
	elif event.is_action_pressed(\"speed\"):
		$Timer.wait_time = 0.2
	elif event.is_action_released(\"speed\"):
		$Timer.wait_time = 0.75
	elif event.is_action_pressed(\"camera_right\") and not cameraTween.is_active():
		camera_rotate = 0
	elif event.is_action_pressed(\"camera_left\") and not cameraTween.is_active():
		camera_rotate = 1
	elif not event is InputEventMouseMotion:
		match(mode):
			1:
				rotate_block(event)
			0: 
				move_block(event)
			_:
				pass
			
func rotate_block(event: InputEvent) -> void:
	longStraight.rotate_block(event)
		
func move_block(event: InputEvent) -> void:
	if event.is_action_pressed(\"left\"):
		if longStraight.can_move(\"left\", length, width):
			longStraight.global_translate(Vector3(0, 0, 2))
	if event.is_action_pressed(\"right\"):
		if longStraight.can_move(\"right\", length, width):
			longStraight.global_translate(Vector3(0, 0, -2))
	if event.is_action_pressed(\"up\"):
		if longStraight.can_move(\"up\", length, width):
			longStraight.global_translate(Vector3(-2, 0, 0))
	if event.is_action_pressed(\"down\"):
		if longStraight.can_move(\"down\", length, width):
			longStraight.global_translate(Vector3(2, 0, 0))

func record_set(piece: Piece) -> void:
	for cube in piece.get_children_without_outline(false):
		if not cube.is_queued_for_deletion():
			var set : Vector3 = cube.global_transform.origin
			set = convert_origin_to_matrix(set)
	#		print(set)
	#		print(matrix[set.y][set.x][set.z])
			matrix[set.y][set.x][set.z] = cube  
	print_matrix()


func check_planes() -> void:
	var planes = []
	for y in height:
		var planed = true
		for x in length:
			if planed:
				for z in width:
					if not matrix[y][x][z] is CSGBox:
						planed = false
						break;
			else:
				break;
		if (planed):
			planes.append(y)
	print(planes)
	if planes.size() > 0:
		print(\"CLEAR\")
		free_planes(planes)
		lower_pieces(planes)
		check_planes()
					
func free_planes(planes: Array) -> void:
	for y in planes:
			for x in length:
				for z in width:
					matrix[y][x][z].queue_free()
					matrix[y][x][z] = false
	print_matrix()

func lower_pieces(planes: Array) -> void:
	var highest_plane = planes.back()
	var processed = []
	for x in length:
		for z in width:
			## SKIP IF ALREADY PROCESSED PIECE
			if matrix[highest_plane+1][x][z] is CSGBox:
				var piece : Piece = (matrix[highest_plane+1][x][z] as CSGBox).get_parent()
				if (not processed.has(piece)):
					var drop_height = calc_piece_drop_height(piece)  # NEXT: ACTUALLY DROP PIECES
					processed.append(piece)
					
					for cube in piece.get_children():
						var pos = convert_origin_to_matrix(cube.global_transform.origin)
						matrix[pos.y][pos.x][pos.z] = false
					piece.transform.origin.y -= drop_height * 2
					
					record_set(piece)
				
					
# piece = a piece identified above the cleared plane which needs to be dropped
# go through each cube in the piece. Go through planes 1 through max height. For each drop height i,
# check if the location below the cube (cube.y - i) is another cube. If it is a cube, check if it belongs
# to the same piece. If it does, ignore. If it belongs to a different piece, add i -1 to the array of potential
# drop heights. If the location is not a cube but the cube height minus the drop height is 0, append that drop height (i).
func calc_piece_drop_height(piece: Piece) -> int:
	var done = false
	var heights = []
	for cube in piece.get_children():
			for i in range(1,height):
				var pos = convert_origin_to_matrix(cube.global_transform.origin)
				var check = matrix[pos.y-i][pos.x][pos.z]
				if check is CSGBox:
					var check_parent = check.get_parent()
					if (not check_parent == piece):
						heights.append(i-1)
						break
					else:
						break
				elif pos.y - i == 0:
					heights.append(i)
					break
	heights.sort()
	return heights[0]
	
func print_matrix() -> void:
	for x in range(matrix.size()):
		print(matrix[x])
		
func convert_origin_to_matrix(global_origin: Vector3) -> Vector3:
	var new_origin = global_origin.round()
	var new = (global_origin.abs()/2).floor()
#	return new
	if (int(new_origin.y) % 2 == 0):
		return new - Vector3(0,1,0)
	else:
		return new

func is_set() -> bool:
	for cube in longStraight.get_children_without_outline(true):
		var current_pos = convert_origin_to_matrix(cube.global_transform.origin)
		var check_pos = current_pos - Vector3(0,1,0)
#		print(\"check pose\")
#		print(cube.global_transform.origin)
#		print(current_pos)
#		print(matrix[check_pos.y][check_pos.x][check_pos.z])
		if current_pos.y == 0 or matrix[check_pos.y][check_pos.x][check_pos.z]:
			return true
	return false
	
"

[sub_resource type="CubeMesh" id=2]

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0.694118, 0.968627, 0.741176, 1 )

[sub_resource type="CubeMesh" id=4]

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 1, 0.0470588, 0.0470588, 1 )

[sub_resource type="ViewportTexture" id=6]
viewport_path = NodePath("Node2D/Viewport")

[node name="Main" type="Spatial"]
script = SubResource( 1 )

[node name="CSGMesh" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5, -1, -5 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh2" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -1, -5 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh3" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -1, -3 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh4" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5, -1, -3 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh5" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5, -1, -7 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh6" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -1, -7 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh7" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, -1, -7 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh8" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, -1, -5 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh9" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, -1, -3 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh10" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, -1, -1 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh11" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -1, -1 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh12" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5, -1, -1 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh13" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -7, -1, -1 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh14" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -7, -1, -3 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh15" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -7, -1, -5 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="CSGMesh16" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -7, -1, -7 )
mesh = SubResource( 2 )
material = SubResource( 3 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.00575988, 0.999983, 0, -0.999983, 0.00575988, -2.77157, 14.4549, -3.55254 )
light_energy = 0.35
shadow_enabled = true

[node name="Timer" type="Timer" parent="."]
wait_time = 0.75
autostart = true

[node name="DebugCube" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, 2, -1 )
visible = false
mesh = SubResource( 4 )
material = SubResource( 5 )

[node name="DebugOverlay" parent="." instance=ExtResource( 1 )]

[node name="Pivot" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4, 0, -4 )

[node name="Camera" type="Camera" parent="Pivot"]
transform = Transform( 0.714949, -0.289811, 0.636285, 0, 0.910048, 0.414503, -0.699177, -0.296348, 0.650638, 7.49022, 13.6895, 7.56896 )
projection = 1
current = true
size = 30.0
near = 0.5

[node name="Tween" type="Tween" parent="Pivot"]

[node name="Node2D" type="Node2D" parent="."]

[node name="Label" type="Label" parent="Node2D"]
margin_left = 5.2038
margin_top = 4.45728
margin_right = 84.2038
margin_bottom = 51.4573
text = "Score"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="Node2D"]
size = Vector2( 1024, 1024 )
own_world = true
transparent_bg = true
render_target_v_flip = true

[node name="HeadingDisplay" parent="Node2D/Viewport" instance=ExtResource( 2 )]
transform = Transform( 0.707107, 0, 0.707107, 0, 1, 0, -0.707107, 0, 0.707107, 0, 0, 0 )

[node name="headingSprite" type="Sprite" parent="Node2D"]
position = Vector2( 667.478, 891.032 )
scale = Vector2( 0.350353, 0.350353 )
texture = SubResource( 6 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
